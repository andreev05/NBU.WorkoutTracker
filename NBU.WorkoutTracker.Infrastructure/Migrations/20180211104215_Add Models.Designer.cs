// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using NBU.WorkoutTracker.Infrastructure.Data.Contexts;
using System;

namespace NBU.WorkoutTracker.Infrastructure.Migrations
{
    [DbContext(typeof(WorkoutTrackerDbContext))]
    [Migration("20180211104215_Add Models")]
    partial class AddModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("NBU.WorkoutTracker.Infrastructure.Data.Models.CompletedExercise", b =>
                {
                    b.Property<int>("CompletedExerciseId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Cheat");

                    b.Property<string>("Comments");

                    b.Property<int?>("CompletedWorkoutId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<int?>("ExerciseId");

                    b.Property<int>("Mins");

                    b.Property<int?>("Reps");

                    b.Property<int?>("Sets");

                    b.Property<bool>("TargetsMet");

                    b.Property<float>("Weight");

                    b.Property<int?>("WorkoutId");

                    b.HasKey("CompletedExerciseId");

                    b.HasIndex("CompletedWorkoutId");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("CompletedExercises");
                });

            modelBuilder.Entity("NBU.WorkoutTracker.Infrastructure.Data.Models.CompletedWorkout", b =>
                {
                    b.Property<int>("CompletedWorkoutId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<DateTime>("DateCreated");

                    b.Property<int?>("PlanId");

                    b.HasKey("CompletedWorkoutId");

                    b.HasIndex("PlanId");

                    b.ToTable("CompletedWorkouts");
                });

            modelBuilder.Entity("NBU.WorkoutTracker.Infrastructure.Data.Models.Exercise", b =>
                {
                    b.Property<int>("ExerciseId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("ExerciseName");

                    b.Property<int>("TargetMins");

                    b.Property<int?>("TargetReps");

                    b.Property<int?>("TargetSets");

                    b.Property<float>("TargetWeight");

                    b.Property<int?>("WorkoutId");

                    b.HasKey("ExerciseId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("NBU.WorkoutTracker.Infrastructure.Data.Models.Plan", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("PlanName");

                    b.HasKey("PlanId");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("NBU.WorkoutTracker.Infrastructure.Data.Models.Workout", b =>
                {
                    b.Property<int>("WorkoutId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<int?>("PlanId");

                    b.Property<string>("WorkoutDetails");

                    b.Property<string>("WorkoutName");

                    b.HasKey("WorkoutId");

                    b.HasIndex("PlanId");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("NBU.WorkoutTracker.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NBU.WorkoutTracker.Infrastructure.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NBU.WorkoutTracker.Infrastructure.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NBU.WorkoutTracker.Infrastructure.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NBU.WorkoutTracker.Infrastructure.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NBU.WorkoutTracker.Infrastructure.Data.Models.CompletedExercise", b =>
                {
                    b.HasOne("NBU.WorkoutTracker.Infrastructure.Data.Models.CompletedWorkout")
                        .WithMany("CompletedExercises")
                        .HasForeignKey("CompletedWorkoutId");

                    b.HasOne("NBU.WorkoutTracker.Infrastructure.Data.Models.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId");

                    b.HasOne("NBU.WorkoutTracker.Infrastructure.Data.Models.Workout")
                        .WithMany("CompletedExercises")
                        .HasForeignKey("WorkoutId");
                });

            modelBuilder.Entity("NBU.WorkoutTracker.Infrastructure.Data.Models.CompletedWorkout", b =>
                {
                    b.HasOne("NBU.WorkoutTracker.Infrastructure.Data.Models.Plan")
                        .WithMany("CompletedWorkouts")
                        .HasForeignKey("PlanId");
                });

            modelBuilder.Entity("NBU.WorkoutTracker.Infrastructure.Data.Models.Exercise", b =>
                {
                    b.HasOne("NBU.WorkoutTracker.Infrastructure.Data.Models.Workout")
                        .WithMany("Exercises")
                        .HasForeignKey("WorkoutId");
                });

            modelBuilder.Entity("NBU.WorkoutTracker.Infrastructure.Data.Models.Workout", b =>
                {
                    b.HasOne("NBU.WorkoutTracker.Infrastructure.Data.Models.Plan")
                        .WithMany("Workouts")
                        .HasForeignKey("PlanId");
                });
#pragma warning restore 612, 618
        }
    }
}
